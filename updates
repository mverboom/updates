#!/usr/bin/env bash
#
# Upgrade systems and create report
#

inc=( "$( dirname $( realpath "$0") )/$lib" "$(dirname $0)" )
for lib in libfrmt.sh libwiki.sh libupdates.sh; do
   found=0
   for libinc in "${inc[@]}"; do
      test -e "$libinc/$lib" && { source "$libinc/$lib"; found=1; break; }
   done
   test "$found" -eq 0 && { echo "Library $lib not found."; exit 1; }
done

makesection() {
   render="$1"; shift
   cache="$1"; shift
   title="$1"; shift

   sectionreport=$(mktemp)

   done=0
   num="$#"
   for host in "$@"; do
      hostrender=0
      if test -f "$cache/$host/$host"; then
         $render "$cache/$host/$host" >> "$sectionreport" && hostrender=1
      fi

      unset cts
      test -d "$cache/$host/" && cts=( $( ls "$cache/$host/" 2> /dev/null | grep -v "$host" ) )

      if test "${#cts[*]}" -gt 0; then
         ctreport=$(mktemp)
         ctcount=0
         for ct in "${cts[@]}"; do
            if test ! -z "$cache/$host/$ct"; then
               $render "$cache/$host/$ct" >> "$ctreport" && ctcount=$(( ctcount + 1 ))
            fi
         done
         if test "$ctcount" -gt 0; then
            if test "$hostrender" = "0" ; then
               frmt new hostreport ${outputformat}
               hostreport h2 "$host" >> "$sectionreport"
               hostreport del
            fi
            frmt new frmtreport ${outputformat}
            frmtreport foldstart "${ctcount} containers" >> "$sectionreport"
            cat "$ctreport" >> "$sectionreport" >> "$sectionreport"
            frmtreport foldend >> "$sectionreport"
            frmtreport del
         fi
         rm -f "$ctreport"
      fi
   done

   if test -s "$sectionreport"; then
      frmt new frmtreport ${outputformat}
      frmtreport h1 "$title"
      frmtreport del
      cat "$sectionreport"
   fi
   rm -f "$sectionreport"
}

verifycache() {
   local cache="$1"
   local host="$2"
   local ct="$3"
   local dst

   test -d "$cache/$host" || mkdir -p "$cache/$host"

   dst="$cache/$host/$host"
   test "$ct" != "" && dst="$cache/$host/$ct"
   test "$FORCE" -eq 1 && return 0
   if test -e "$dst"; then
      lastmod=$(stat -c "%Y" "$dst")
      test $(( $(date "+%s") - lastmod )) -lt $MAXCACHEAGE && return 1
   fi
   return 0
}

check-render-host() {
   local output="$1"
   local h="$2"
   local host="$3"
   local line
   local stamp="$(date -d "@$date" "+%Y/%m/%d %H:%M:%S")"

   $output "$h" "$host ($stamp)"
   unset p1 p2
   test "${#updates_avail[*]}" -gt 0 && local p1="${#updates_avail[*]} updates"
   test "${#updates_hold[*]}" -gt 0 -a "$reporthold" != "off" && local p2="${#updates_hold[*]} hold"
   test "$p1" != "" -a "$p2" != "" && $output foldstart "$p1/$p2" || $output foldstart "$p1$p2"
   $output t_head Package "Current version" "New version" Source
   if test "$reporthold" != "off"; then
      for pkg in ${updates_hold[*]}; do
         $output t_line "$pkg (on hold)" "${updates_curver[$pkg]}" "${updates_newver[$pkg]}" "${updates_newversrc[$pkg]}"
      done
   fi
   for pkg in ${updates_avail[*]}; do
      $output t_line "$pkg" "${updates_curver[$pkg]}" "${updates_newver[$pkg]}" "${updates_newversrc[$pkg]}"
   done
   $output t_end
   $output foldend
}

check-report-hosts() {
   local src="$1"
   local head="h2"

   unset host date ctname ctid updates_avail updates_hold updates_curver updates_newver updates_newversrc
   . "$src"

   test "$date" -lt "$reportafter" && return 1

   test "$reporthold" = "off" -a "${#updates_avail[*]}" -eq 0 && return 1
   frmt new checkrender ${outputformat}
   if test "$ctname" == ""; then
      check-render-host checkrender h2 "$host"
   else
      check-render-host checkrender h3 "$ctname ($ctid@$host)"
   fi
   checkrender del
   return 0
}

check-report() {
   local systems
   local cache="$CACHE/updates"

   test "$report" = "" && { wiki connect || { echo "Unable to connect to wiki ($(wiki error))."; exit 1; } }
   reportoutput=$(mktemp)
   echo "Generated on: $(date "+%Y/%m/%d  %H:%M:%S") (results after $(date -d "@$reportafter" "+%Y/%m/%d  %H:%M:%S"))" > "$reportoutput"
   for section in $( printf "%s\n" ${!hostsectionnames[@]} | sort ); do
      unset systems
      [[ -v hostlists[@] ]] && test "${hostlists[$section]}" != "" && systems=( ${hostlists[$section]} )
      [[ -v hostcmds[@] ]] && test "${hostcmds[$section]}" != "" && systems=( $( bash -c "${hostcmds[$section]}" ) )
      makesection check-report-hosts "$cache" "${hostsectionnames[$section]}" "${systems[@]}" >> "$reportoutput"
   done
   test "$report" = "" && { wiki save "${main[checkreport]}" - < "$reportoutput" || { echo "Unable to save to wiki ($(wiki error))."; exit 1; } }
   test "$report" != "" && cat "$reportoutput"
   rm -f "$reportoutput"
}

check-save() {
   local output="$1"
   local date=$(date "+%s")

   {
      declare -p host date | sed 's/ --/ -g/'
      test "$ctname" != "" && declare -p ctname | sed 's/ --/ -g/'
      test "$ctid" != "" && declare -p ctid | sed 's/ --/ -g/'
      declare -p updates_avail updates_hold updates_curver updates_newver updates_newversrc | sed 's/ -[aA]/&g/'
   } > "$output"
}

check-container() {
   local ctname="${containers[$ctid]}"

   [[ " ${ctexcl[@]} " =~ " ${ctid} " ]] && return
   test "${#ctincl[*]}" -gt 0 && [[ ! " ${ctincl[@]} " =~ " ${ctid} " ]] && return
   verifycache "$cache" "$host" "$ctname" || return
   rm -f "$cache/$host/$ctname"
   updates check "${opts[@]}" "$host" "$ctid" || { println "Error on container $ctname ($(updates error))" >&2; return; }
   if test "${#updates_avail[*]}" -gt 0 -o ${#updates_hold[*]} -gt 0; then
      check-save "$cache/$host/$ctname"
   fi
}

check-host() {
   local line="$1"
   unset ctname ctid
   checkhost=1
   local jobs="$PARCT"
   declare -a running
   declare -a runningct
   local slot=0

   [[ " ${hostexcl[@]} " =~ " ${host} " ]] && checkhost=0

   println() {
      test "$QUIET" -eq 0 && printf "\e[%dA\e[K%s\e[%dB\r" "$line" "$1" "$line"
   }

   updatesfound=0
   test "${host//./}" = "$host" && { println "Skipping host ${host}, does not look like fqdn."; return; }
   updates is-container "$host" && { println "Skipping host ${host}, is a container."; return; }
   test "$QUIET" -eq 0 && println "$done/$num $host" >&2

   if test "$checkhost" -eq 1 && verifycache "$cache" "$host"; then
      rm -f "$cache/$host/$host"
      updates check "${opts[@]}" "$host" || println "Error on $host $(updates error)" >&2
      if test "${#updates_avail[*]}" -gt 0 -o ${#updates_hold[*]} -gt 0; then
         updatesfound=1
         check-save "$cache/$host/$host"
      fi
   fi

   test "${ctexcl[0]}" = "all" && { println "$done/$num done"; return; }
   updates list-containers "$host"
   test "${#containers[*]}" -eq 0 && { println "$done/$num done"; return; }
   ctdone=0
   for ctid in "${!containers[@]}"; do
      check-container &
      running[$slot]="$!"
      runningct[$slot]="$ctid"
      ctdone=$(( ctdone + 1 ))
      test "$QUIET" -eq 0 && println "$done/$num $host, ct: ${runningct[*]// /,} ($ctdone/${#containers[@]})" >&2
      if test "${#running[*]}" -eq $jobs; then
         wait -p pid -n ${running[*]}
         for slot in ${!running[@]}; do
            test "${running[$slot]}" = "$pid" && break
         done
         unset 'running[slot]'
         unset 'runningct[slot]'
      else
         slot=$(( slot + 1 ))
      fi
   done
   wait
   println "$done/$num done"
}

check() {
   local done=0
   local num="$#"
   local updatesfound
   local cache="$CACHE/updates"
   local opts
   declare -a opts
   local jobs="$PARHOST"
   declare -a running
   local slot=0

   test "$UPDATE" -eq 1 && opts+=( "-u" )
   test "$#" -lt "$jobs" && jobs="$#"

   test "$QUIET" -eq 0 && printf '%.0s\n' $(seq 1 $jobs)
   for host in "$@"; do
      done=$(( done + 1 ))
      check-host $(( jobs - slot )) &
      running[$slot]="$!"
      if test "${#running[*]}" -eq $jobs; then
         wait -p pid -n ${running[*]}
         for slot in ${!running[@]}; do
            test "${running[$slot]}" = "$pid" && break
         done
         unset 'running[slot]'
      else
         slot=$(( slot + 1 ))
      fi
   done
   wait
}

upgradehost-save() {
   local output="$1"
   local date=$(date "+%s")

   {
      declare -p host date ret | sed 's/ --/ -g/'
      test "$ctname" != "" && declare -p ctname | sed 's/ --/ -g/'
      test "$ctid" != "" && declare -p ctid | sed 's/ --/ -g/'
      declare -p updates_output | sed 's/ -[aA]/&g/'
   } > "$output"
}

upgrade-container() {
   local ctname="${containers[$ctid]}"

   verifycache "$cache" "$host" "$ctname" || return
   updates check "$host" "$ctid" || { println "Error on container $ctname ($(updates error))" >&2; return; }
   dstfile="$cache/$host/$ctname"
   if test "${#updates_avail[*]}" -gt 0; then
      updates upgrade "${opts[@]}" "$host" "$ctid"
      ret=$?
      upgradehost-save "$dstfile"
   else
      test -e "$dstfile" && touch "$dstfile"
   fi
}

upgrade-host() {
   local line="$1"
   local jobs="$PARCT"
   local checkhost dstfile
   declare -a running runningct
   unset ctname ctid
   local slot=0
   checkhost=1

   println() {
      test "$QUIET" -eq 0 && printf "\e[%dA\e[K%s\e[%dB\r" "$line" "$1" "$line"
   }

   [[ " ${hostexcl[@]} " =~ " ${host} " ]] && checkhost=0
   [[ " ${blacklist[@]} " =~ " ${host} " ]] && test "$NOCTBL" != 1 && return
   [[ " ${blacklist[@]} " =~ " ${host} " ]] && checkhost=0
   test "${host//./}" = "$host" && { println "Skipping host ${host}, does not look like fqdn.\n"; return; }
   updates is-container "$host" && { println "Skipping host ${host}, is a container.\n"; return; }
   test "$QUIET" -eq 0 && println "$done/$num $host" >&2

   if test "$checkhost" -eq 1 && verifycache "$cache" "$host"; then
      updates check "$host"
      dstfile="$cache/$host/$host"
      if test "${#updates_avail[*]}" -gt 0; then
         updates upgrade "${opts[@]}" "$host"
         ret=$?
         upgradehost-save "$dstfile"
      else
         test -e "$dstfile" && touch "$dstfile"
      fi
   fi

   test "${ctexcl[0]}" = "all" && { println "$done/$num done"; return; }
   updates list-containers "$host"
   test "${#containers[*]}" -eq 0 && { println "$done/$num done"; return; }
   ctdone=0
   for ctid in "${!containers[@]}"; do
      local ctname="${containers[$ctid]}"
      [[ " ${ctexcl[@]} " =~ " ${ctid} " ]] && continue
      test "${#ctincl[*]}" -gt 0 && [[ ! " ${ctincl[@]} " =~ " ${ctid} " ]] && continue
      [[ " ${blacklist[@]} " =~ " ${ctname} " ]] && continue

      upgrade-container &
      running[$slot]="$!"
      runningct[$slot]="$ctid"
      ctdone=$(( ctdone + 1 ))
      test "$QUIET" -eq 0 && println "$done/$num $host, ct: ${runningct[*]// /,} ($ctdone/${#containers[@]})" >&2
      if test "${#running[*]}" -eq $jobs; then
         wait -p pid -n ${running[*]}
         for slot in ${!running[@]}; do
            test "${running[$slot]}" = "$pid" && break
         done
         unset 'running[slot]'
         unset 'runningct[slot]'
      else
         slot=$(( slot + 1 ))
      fi
   done
   wait
   println "$done/$num done"
}

upgrade() {
   local done=0
   local num="$#"
   local cache="$CACHE/upgrades"
   local opts
   declare -a opts
   local jobs="$PARHOST"
   declare -a running
   local slot=0

   test "$DRYRUN" -eq 1 && opts+=( "-s" )
   test "$DOWNLOAD" -eq 1 && opts+=( "-d" )

   test "$#" -lt "$jobs" && jobs="$#"

   test "$QUIET" -eq 0 && printf '%.0s\n' $(seq 1 $jobs)
   for host in "$@"; do
      done=$(( done + 1 ))
      upgrade-host $(( jobs - slot )) &
      running[$slot]="$!"
      if test "${#running[*]}" -eq $jobs; then
         wait -p pid -n ${running[*]}
         for slot in ${!running[@]}; do
            test "${running[$slot]}" = "$pid" && break
         done
         unset 'running[slot]'
      else
         slot=$(( slot + 1 ))
      fi
   done
   wait
}

upgrade-render-host() {
   local output="$1"
   local h="$2"
   local host="$3"
   local ret="$4"
   local line
   local stamp="$(date -d "@$date" "+%Y/%m/%d %H:%M:%S")"

   local state="ok"
   [[ " ${updates_output[*]} " =~ " Configuration file " ]] && state="CONFIG CHANGE"
   test "$ret" != "0" && state="FAIL"
   $output "$h" "$host ($state) ($stamp)"
   test "$reportskip" = "1" && return
   $output foldstart "Output ${#updates_output[*]} lines"
   for line in "${updates_output[@]}"; do
      $output pre "$line"
   done
   $output foldend
}

upgrade-report-hosts() {
   local src="$1"
   local head="h2"

   unset host date ret ctname ctid updates_output
   . "$src"

   test "$date" -lt "$reportafter" && return 1
   test "$reporterr" = "1" -a "$ret" = "0" && return 1

   frmt new upgraderender ${outputformat}
   if test "$ctname" == ""; then
      upgrade-render-host upgraderender h2 "$host" "$ret"
   else
      upgrade-render-host upgraderender h3 "$ctname ($ctid@$host)" "$ret"
   fi
   upgraderender del
}

upgrade-report() {
   local systems
   local cache="$CACHE/upgrades"

   test "$report" = "" && { wiki connect || { echo "Unable to connect to wiki ($(wiki error))."; exit 1; } }
   reportoutput=$(mktemp)
   echo "Generated on: $(date "+%Y/%m/%d  %H:%M:%S") (results after $(date -d "@$reportafter" "+%Y/%m/%d  %H:%M:%S"))" > "$reportoutput"
   for section in $( printf "%s\n" ${!hostsectionnames[@]} | sort ); do
      unset systems
      [[ -v hostlists[@] ]] && test "${hostlists[$section]}" != "" && systems=( ${hostlists[$section]} )
      [[ -v hostcmds[@] ]] && test "${hostcmds[$section]}" != "" && systems=( $( bash -c "${hostcmds[$section]}" ) )
      makesection upgrade-report-hosts "$cache" "${hostsectionnames[$section]}" "${systems[@]}" >> "$reportoutput"
   done
   test "$report" = "" && { wiki save "${main[upgradereport]}" - < "$reportoutput" || { echo "Unable to save to wiki ($(wiki error))."; exit 1; } }
   test "$report" != "" && cat "$reportoutput"
   rm -f "$reportoutput"
}

usage() {
   case "$1" in
   "list") echo "$0 $1 <options>"
      echo
      echo "List hosts"
      echo
      echo "Options:"
      echo "   -h            This help."
      echo "   -a            List all hosts."
      echo "   -b            List all blacklisted hosts."
      ;;
   "check") echo "$0 $1 <options> [host fqdn..]"
      echo
      echo "When specifying a host, the fqdn should be used."
      echo "When no host(s) are specified, a full host list will be used."
      echo
      echo "Options:"
      echo "   -h            This help."
      echo "   -f            Force updates check even if cached report is not expired."
      echo "   -u            Update package information on system."
      echo "   -p            Enable parallelism."
      echo "   -i <ctid(s)>  Include only container id(s). Should be comma separated."
      echo "   -e <ctid(s)>  Exclude these container id(s). Should be comma separated. If only keyword \"all\" is specified, all containers will be excluded."
      echo "   -E <host(s)>  Exclude these hosts(s). Any containers on the host will be checked. Should be comma separated."
      ;;
   "check-list") echo "$0 $1 <options> [host fqdn..]"
      echo
      echo "When specifying a host, the fqdn should be used."
      echo "When no host(s) are specified, all hosts in cache will be used."
      echo
      echo "Options:"
      echo "   -h            This help."
      echo "   -H            Only show hosts with updates."
      echo "   -C            Only show containers with updates."
      ;;
   "check-report") echo "$0 $1 <options>"
      echo
      echo "When specifying a host, the fqdn should be used."
      echo
      echo "Options:"
      echo "   -h            This help."
      echo "   -H            Exclude packages on hold from report."
      echo "   -a            Force ascii report to stdout."
      echo "   -w            Force html report to stdout."
      echo "   -A <date>     Report reqults newer than date. Defaults to today at 0:00."
      echo "   -p <page>     Name of the page to upload to (defaults to ${main[checkreport]})."
      ;;
   "upgrade") echo "$0 $1 <options> [host fqdn..]"
      echo
      echo "When specifying a host, the fqdn should be used."
      echo "When no host(s) are specified, a full host list will be used."
      echo
      echo "Options:"
      echo "   -h            This help."
      echo "   -s            Simulate, don't actually upgrade."
      echo "   -d            Download packages, don't install."
      echo "   -f            Force upgrade check even if cached report is not expired."
      echo "   -p            Enable parallelism."
      echo "   -b            Don't blacklist all containers from upgrades if the host is blacklisted."
      echo "   -i <ctid(s)>  Include only container id(s). Should be comma separated."
      echo "   -e <ctid(s)>  Exclude these container id(s). Should be comma separated. If only keyword \"all\" is specified, all containers will be excluded."
      echo "   -E <host(s)>  Exclude these hosts(s). Any containers on the host will be checked. Should be comma separated."
      ;;
   "upgrade-report") echo "$0 $1 <options>"
      echo
      echo "Options:"
      echo "   -h            This help."
      echo "   -a            Force ascii report to stdout."
      echo "   -w            Force html report to stdout."
      echo "   -e            Report results with error (not ok) state only."
      echo "   -s            Skip upgrade command output."
      echo "   -A <date>     Report reqults newer than date. Defaults to today at 0:00."
      echo "   -p <page>     Name of the page to upload to (defaults to ${main[upgradereport]})."
      ;;
   *) echo "$0 [options..] <action> [option(s)...]"
      echo
      echo "Action:"
      echo "  list            List hosts."
      echo "  check           Check hosts for updates."
      echo "  check-report    Generate hosts with updates report."
      echo "  check-list      Generate list of hosts with pending updates."
      echo "  upgrade         Upgrade specified host(s)."
      echo "  upgrade-report  Generate upgrade report."
      echo
      echo "Options:"
      echo "   -c <cfg file>  Config file (defaults to $CFG)."
      echo "   -q             Be quiet."
      echo "   -h             This help."
      ;;
   esac
   exit 1
}

readconfig() {
   local var
   local val
   local section
   local cfg

   CFG=$(realpath $CFG)
   ! test -e $CFG && { echo "Config file $CFG does not exist."; exit 1; }
   test $(stat -c %a $CFG) -gt 600 && { echo "Unsafe permissions on config file $CFG."; exit 1; }

   while IFS='= ' read var val
   do
      if [[ $var == \[*] ]]
      then
          section=${var:1:-1}
      elif [[ $val ]]
      then
          declare -g -A "$section[$var]=$val"
      fi
   done < <(grep -v "^#" $CFG)
   test "${main[wikiprofile]}" = "" && { echo "wikiprofile not defined in config file."; exit 1; }
   test "${main[allhostslist]}" = "" -a "${main[allhostscmd]}" = "" && { echo "allhostslist and allhostscmd not defined in config file."; exit 1; }
   test "${main[allhostslist]}" != "" -a "${main[allhostscmd]}" != "" && { echo "allhostslist and allhostscmd both defined in config file."; exit 1; }
   test "${main[checkreport]}" = "" && main[checkreport]="Updatereport"
   test "${main[upgradereport]}" = "" && main[upgradereport]="Upgradereport"
   test "${main[allhostscmd]}" != "" && allhosts=( $( bash -c "${main[allhostscmd]}" ) )
   test "${main[allhostslist]}" != "" && allhosts=( ${main[allhostslist]} )
   test "${main[upgradeblacklistcmd]}" != "" && blacklist=( $( bash -c "${main[upgradeblacklistcmd]}" ) )
   test "${main[upgradeblacklist]}" != "" && blacklist=( ${main[upgradeblacklist]} )
}

arguments() {
   while getopts :hqc: opt; do
     case $opt in
     h) usage ;;
     q) QUIET=1 ;;
     c) CFG=$OPTARG ;;
     \?) echo "Unknown option: -$OPTARG"; usage ;;
     :) echo "Option -$OPTARG requires argument"; usage ;;
     esac
   done
   shift $((OPTIND-1))

   readconfig

   action="$1"; shift
   OPTIND=1

   case "$action" in
   "list")
      main[list]=all
      while getopts :hab opt; do
         case $opt in
         h) usage $action;;
         a) main[list]=all;;
         b) main[list]=black;;
         \?) echo "Unknown option: -$OPTARG"; usage $action;;
         :) echo "Option -$OPTARG requires argument"; usage $action;;
         esac
      done
      shift $((OPTIND-1))
      test $# -ne 0 && hosts=( "$@" )
   ;;
   "check")
      while getopts :hfpui:e:E: opt; do
         case $opt in
         h) usage $action ;;
         f) FORCE=1 ;;
         u) UPDATE=1 ;;
         i) ctincl=( ${OPTARG//,/ } ) ;;
         p) PARALLEL=1 ;;
         e) ctexcl=( ${OPTARG//,/ } ) ;;
         E) hostexcl=( ${OPTARG//,/ } ) ;;
         \?) echo "Unknown option: -$OPTARG"; usage $action ;;
         :) echo "Option -$OPTARG requires argument"; usage $action ;;
         esac
      done
      shift $((OPTIND-1))
      test $# -ne 0 && hosts=( "$@" )
      if test "${#hosts[*]}" -eq 0; then
         hosts=( "${allhosts[@]}" )
      else
         for host in ${hosts[@]}; do
            [[ ! " ${allhosts[@]} " =~ " ${host} " ]] && { echo "Host ${host} not part of all hosts."; exit 1; }
         done
      fi
   ;;
   "check-list")
      while getopts :hHC opt; do
         case $opt in
         h) usage $action;;
         H) hostonly=1;;
         C) ctonly=1;;
         \?) echo "Unknown option: -$OPTARG"; usage $action;;
         :) echo "Option -$OPTARG requires argument"; usage $action;;
         esac
      done
      shift $((OPTIND-1))
      test $# -ne 0 && hosts=( "$@" )
   ;;
   "check-report")
      while getopts :hHfp:i:e:E:awA: opt; do
         case $opt in
         h) usage $action;;
         H) reporthold=off;;
         p) main[checkreport]="$OPTARG" ;;
         w) report=html;;
         a) report=ascii;;
         A) reportafter=$( date -d "${OPTARG}" "+%s" );;
         \?) echo "Unknown option: -$OPTARG"; usage $action;;
         :) echo "Option -$OPTARG requires argument"; usage $action;;
         esac
      done
      shift $((OPTIND-1))
   ;;
   "upgrade")
      while getopts :hcpfdsi:e:E: opt; do
         case $opt in
         h) usage $action ;;
         c) NOCTBL=1 ;;
         f) FORCE=1 ;;
         p) PARALLEL=1 ;;
         s) DRYRUN=1 ;;
         d) DOWNLOAD=1 ;;
         i) ctincl=( ${OPTARG//,/ } ) ;;
         e) ctexcl=( ${OPTARG//,/ } ) ;;
         E) hostexcl=( ${OPTARG//,/ } ) ;;
         \?) echo "Unknown option: -$OPTARG"; usage $action ;;
         :) echo "Option -$OPTARG requires argument"; usage $action ;;
         esac
      done
      shift $((OPTIND-1))
      test $# -ne 0 && hosts=( "$@" )
      if test "${#hosts[*]}" -eq 0; then
         hosts=( "${allhosts[@]}" )
      else
         for host in ${hosts[@]}; do
            [[ ! " ${allhosts[@]} " =~ " ${host} " ]] && { echo "Host ${host} not part of all hosts."; exit 1; }
         done
      fi
   ;;
   "upgrade-report")
      while getopts :hefp:i:e:E:aswA: opt; do
         case $opt in
         h) usage $action;;
         e) reporterr=1;;
         p) main[upgradereport]="$OPTARG" ;;
         w) report=html;;
         a) report=ascii;;
         s) reportskip=1;;
         A) reportafter=$( date -d "${OPTARG}" "+%s" );;
         \?) echo "Unknown option: -$OPTARG"; usage $action;;
         :) echo "Option -$OPTARG requires argument"; usage $action;;
         esac
      done
      shift $((OPTIND-1))
   ;;
   *) echo "Unknown action $action"; usage ;;
   esac
   if test "$PARALLEL" = "1"; then
      test "${main[parallelhost]}" != "" && PARHOST=${main[parallelhost]} || PARHOST=4
      test "${main[parallelct]}" != "" && PARCT=${main[parallelct]} || PARCT=2
   fi
}

list() {
   case "${main[list]}" in
   all)
      printf "%s\n" ${allhosts[@]}
   ;;
   black)
      printf "%s\n" ${blacklist[@]}
   ;;
   esac
}

main() {
   CACHE="$HOME/.updates.cache"
   MAXCACHEAGE=6000
   FORCE=0
   DRYRUN=0
   DOWNLOAD=0
   UPDATE=0
   QUIET=0
   reportafter=$( date -d "today 0:0:0" "+%s" )
   PARHOST=1
   PARCT=1
   CFG=~/.updates.ini

   ! test -d "$CACHE" && mkdir "$CACHE"

   arguments "$@"

   wiki profile "${main[wikiprofile]}" || { echo "Unable to open wiki ($(wiki error))"; exit 1; }
   outputformat=$( wiki type )
   test "$report" != "" && outputformat="$report"
   case "$action" in
   "list")
      list
   ;;
   "check")
      check "${hosts[@]}"
   ;;
   "check-list")
      check-list
   ;;
   "check-report")
      check-report
   ;;
   "upgrade")
      upgrade "${hosts[@]}"
   ;;
   "upgrade-report")
      upgrade-report
   ;;
   *) echo "Unknown action $action"; usage ;;
   esac
}

main "$@"
